x2 ~ (Aq - 2.8e-06)/3e-07),
randomize = FALSE)
##  Setting up experiment 4
set.seed(8)    # setting your own seed
expt4 <- dupe(design4)
expt4
dat4 <- read.table("RS_results4_withNoise.tsv",
header=TRUE)
expt4$range <- dat4$range
expt2$range2 <- dat2$range[1:nrow(expt2)]
rsm6 <- rsm(range ~ SO(x1, x2), data=expt4)
expt2_mat <- as.matrix(expt2)
rsm6 <- rsm(range ~ SO(x1, x2), data = expt2_mat)
rsm6 <- rsm(range ~ SO(x1, x2), data = expt2_mat)
expt2_mat <- as.matrix(expt2)
expt2_df <- as.data.frame(expt2_mat)
rsm6 <- rsm(range ~ SO(x1, x2), data = expt2_df)
rsm6 <- rsm(range ~ SO(x1, x2), data=expt4)
rsm6.summary <- summary(rsm6)
rsm6 <- rsm(range ~ SO(x1, x2), data=expt4)
##  basic RSM design
design4 <- ccd(2,
n0=2,
coding = c(x1 ~ (alpha - 42)/12,
x2 ~ (Aq - 2.8e-06)/3e-07),
randomize = FALSE)
##  Setting up experiment 4
set.seed(xxx)    # setting your own seed
##  Setting up experiment 4
set.seed(8)    # setting your own seed
expt4 <- dupe(design4)
expt4
dat4 <- read.table("RS_results4_withNoise.tsv",
header=TRUE)
expt4$range <- dat4$range
rsm6 <- rsm(range ~ SO(x1, x2), data=expt4)
rsm6.summary <- summary(rsm6)
expt4$range4 <- dat4$range[1:nrow(expt4)]
rsm6 <- rsm(range ~ SO(x1, x2), data=expt4)
dat4 <- read.table("RS_results4_withNoise.tsv",
header=TRUE)
expt4$range4 <- dat4$range[1:nrow(expt4)]
rsm6 <- rsm(range ~ SO(x1, x2), data=expt4)
rsm6 <- rsm(range ~ SO(x1, x2), data=expt4)
expt4_mat <- as.matrix(expt4)
expt4_df <- as.data.frame(expt4_mat)
rsm6 <- rsm(range ~ SO(x1, x2), data = expt2_df)
rsm6 <- rsm(range ~ SO(x1, x2), data=expt4)
rsm6.summary <- summary(rsm6)
rsm6.summary
rsm6 <- rsm(range ~ SO(x1, x2), data = expt2_df)
View(expt4)
View(expt4_df)
View(expt4_df)
View(expt4_mat)
rsm6 <- rsm(range ~ SO(x1, x2), data = expt2_df)
##  basic RSM design
design4 <- ccd(2,
n0=2,
coding = c(x1 ~ (alpha - 42)/12,
x2 ~ (Aq - 2.8e-06)/3e-07),
randomize = FALSE)
##  Setting up experiment 4
set.seed(8)    # setting your own seed
expt4 <- dupe(design4)
expt4
dat4 <- read.table("RS_results4_withNoise.tsv",
header=TRUE)
expt4$range <- dat4$range
View(expt4)
View(dat4)
View(expt4)
##  Setting up experiment 4
set.seed(6)    # setting your own seed
expt4 <- dupe(design4)
expt4
dat4 <- read.table("RS_results4_withNoise.tsv",
header=TRUE)
expt4$range <- dat4$range
##  Setting up experiment 4
set.seed(8)    # setting your own seed
expt4 <- dupe(design4)
expt4
dat4 <- read.table("RS_results4_withNoise.tsv",
header=TRUE)
expt4$range <- dat4$range
rsm6 <- rsm(range ~ SO(x1, x2), data=expt4)
#expt4$range <- dat4$range
expt4$range4 <- dat4$range[1:nrow(expt4)]
rsm6 <- rsm(range ~ SO(x1, x2), data=expt4)
rsm6 <- rsm(range ~ FO(x1, x2), data=expt4)
rsm6 <- rsm(range ~ SO(x1, x2), data=expt4)
##  Setting up experiment 4
set.seed(8)    # setting your own seed
expt4 <- dupe(design4)
as.data.frame(expt4)
expt4
expt4.coded <- code2val(expt4, attr(expt4, "codings"))
## ACHTUNG: Auf Reihenfolge achten!
write.table(cbind(alpha = expt4.coded[, 3], beta = expt2.add[, 1],
Aq = expt4.coded[, 4], expt2.add[, 2:6]),
"RS_expt4.tsv",
sep = "\t", quote = FALSE, dec = ".", row.names = FALSE)
##  basic RSM design
design4 <- ccd(2,
n0=2,
coding = c(x1 ~ (alpha - 42)/12,
x2 ~ (Aq - 2.8e-06)/3e-07),
randomize = FALSE)
##  Setting up experiment 4
set.seed(8)    # setting your own seed
expt4 <- dupe(design4)
expt4
dat4 <- read.table("RS_results4_withNoise.tsv",
header=TRUE)
#expt4$range <- dat4$range
expt4$range4 <- dat4$range[1:nrow(expt4)]
rsm6 <- rsm(range ~ SO(x1, x2), data=expt4)
rsm6.summary <- summary(rsm6)
library(rsm)
##  basic design
design <- cube(basis = ~ x1 + x2 + x3,
generators = x4 ~ x1*x2*x3,
n0 = 0,
reps = 1,
coding = c(x1 ~ (alpha - 30)/15,
x2 ~ (beta - 15)/15,
x3 ~ (Aq - 2.5e-06)/0.5e-06,
x4 ~ (d - 0.15)/0.05),
randomize = FALSE)
as.data.frame(design)
design
set.seed(8)    # setting your own seed
expt <- djoin(dupe(design), dupe(design))
as.data.frame(expt)
expt
expt.add <- data.frame(mt = 0.015,
mf = 0.015,
pin = 1.5,
dzul = 7.5)
expt.coded <- code2val(expt, attr(expt, "codings"))
write.table(cbind(expt.coded[, c(3:6)], expt.add),
"RS_expt1.tsv",
sep = "\t", quote = FALSE, dec = ".", row.names = FALSE)
library(rsm)
##  basic design
design <- cube(basis = ~ x1 + x2 + x3,
generators = x4 ~ x1*x2*x3,
n0 = 0,
reps = 1,
coding = c(x1 ~ (alpha - 30)/15,
x2 ~ (beta - 15)/15,
x3 ~ (Aq - 2.5e-06)/0.5e-06,
x4 ~ (d - 0.15)/0.05),
randomize = FALSE)
set.seed(008)    # setting your own seed
expt <- djoin(dupe(design), dupe(design))
expt
dat <- read.table("RS_results4_withNoise.tsv",
header=TRUE)
expt$range <- dat$range
##  First order model (main effects only) of 'Block 1'
rsm1 <- rsm(range ~ FO(x1, x2, x3, x4), data=expt, subset=(Block==1))
summary(rsm1)
##  First order and two-way interaction model of 'Block 1';
##  => only least squares estimates, perfect fit, no testing!!!
rsm2 <- rsm(range ~ FO(x1, x2, x3, x4) + TWI(x1, x2, x3, x4),
data=expt, subset=(Block==1))
summary(rsm2)
##  First order and two-way interaction model of all data
rsm3 <- rsm(range ~ FO(x1, x2, x3, x4) + TWI(x1, x2, x3, x4),
data=expt)
summary(rsm3)
##  First order and two-way interaction model of all data with blocking
##  effect; => no significant blocking effect, that's exactly what we
##  would expect!
rsm4 <- rsm(range ~ Block + FO(x1, x2, x3, x4) + TWI(x1, x2, x3, x4),
data=expt)
summary(rsm4)
##  Model 'rsm3' is exactly what we want!!!
summary(rsm3)
##  basic design
design2 <- cube(basis = ~ x1 + x2,
n0 = 0,
reps = 1,
coding = c(x1 ~ (alpha - 30)/15,
x2 ~ (Aq - 2.5e-06)/0.5e-06),
randomize = FALSE)
as.data.frame(design2)
design2
set.seed(8)    # setting your own seed
expt2 <- djoin(dupe(design2), dupe(design2))
as.data.frame(expt2)
expt2
expt2.add <- data.frame(beta = 15,   # mittlere Einstellung
d = 0.15,   # mittlere Einstellung
mt = 0.015,
mf = 0.015,
pin = 1.5,
dzul = 7.5)
expt2.coded <- code2val(expt2, attr(expt2, "codings"))
## ACHTUNG: Auf Reihenfolge achten!
write.table(cbind(alpha = expt2.coded[, 3], beta = expt2.add[, 1],
Aq = expt2.coded[, 4], expt2.add[, 2:6]),
"RS_expt2.tsv",
sep = "\t", quote = FALSE, dec = ".", row.names = FALSE)
##  basic design
design2 <- cube(basis = ~ x1 + x2,
n0 = 0,
reps = 1,
coding = c(x1 ~ (alpha - 30)/15,
x2 ~ (Aq - 2.5e-06)/0.5e-06),
randomize = FALSE)
set.seed(008)    # setting your own seed
expt2 <- djoin(dupe(design2), dupe(design2))
expt2
dat2 <- read.table("RS_results4_withNoise.tsv",
header=TRUE)
expt2$range2 <- dat2$range[1:nrow(expt2)]
##  Fitting a first order model for x1 and x2 only; => regression plane!
rsm5 <- rsm(range2 ~ FO(x1, x2), data=expt2)
summary(rsm5)
##  Plotting
contour(rsm5, ~ x1 + x2, image=TRUE)
##  5-step direction accoring to first-order model
rsm5.steepest <- steepest(rsm5, dist=0:5)
rsm5.steepest
expt2.add <- data.frame(beta = 15,   # mittlere Einstellung
d = 0.15,   # mittlere Einstellung
mt = 0.015,
mf = 0.015,
pin = 1.5,
dzul = 7.5)
##  ACHTUNG: Auf Reihenfolge und Design-Space / Definitionsbereich achten!
write.table(cbind(alpha = rsm5.steepest[1:5, 5], beta = expt2.add[, 1],
Aq = rsm5.steepest[1:5, 6], expt2.add[, 2:6]),
"RS_expt3.tsv",
sep = "\t", quote = FALSE, dec = ".", row.names = FALSE)
##  Basic RSM design
design4 <- ccd(2,
n0=2,
coding = c(x1 ~ (alpha - 42)/12,
x2 ~ (Aq - 2.8e-06)/3e-07),
randomize = FALSE)
as.data.frame(design4)
design4
##  Setting up experiment 4
set.seed(8)    # setting your own seed
expt4 <- dupe(design4)
as.data.frame(expt4)
expt4
expt4.coded <- code2val(expt4, attr(expt4, "codings"))
## ACHTUNG: Auf Reihenfolge achten!
write.table(cbind(alpha = expt4.coded[, 3], beta = expt2.add[, 1],
Aq = expt4.coded[, 4], expt2.add[, 2:6]),
"RS_expt4.tsv",
sep = "\t", quote = FALSE, dec = ".", row.names = FALSE)
##  basic RSM design
design4 <- ccd(2,
n0=2,
coding = c(x1 ~ (alpha - 42)/12,
x2 ~ (Aq - 2.8e-06)/3e-07),
randomize = FALSE)
##  Setting up experiment 4
set.seed(8)    # setting your own seed
expt4 <- dupe(design4)
expt4
dat4 <- read.table("RS_results4_withNoise.tsv",
header=TRUE)
#expt4$range <- dat4$range
expt4$range4 <- dat4$range[1:nrow(expt4)]
rsm6 <- rsm(range ~ SO(x1, x2), data=expt4)
View(expt4)
View(dat4)
View(dat2)
View(rsm5.steepest)
expt4_matrix <- as.matrix(expt4_complete)
expt4_complete <- expt4[complete.cases(expt4), ]
rsm6 <- rsm(range ~ SO(x1, x2), data = expt4_complete)
expt4_complete <- expt4[complete.cases(expt4), ]
rsm6 <- rsm(range ~ SO(x1, x2), data = expt4_complete)
expt4_matrix <- as.matrix(expt4_complete)
rsm6 <- rsm(range ~ SO(x1, x2), data = expt4_matrix)
library (ggplot2)
library (car)
install.packages(car)
install.packages(car)
install.packages("car")
library (mgcv)
library (nlme)
library (rmarkdown)
library
x <- 2.5
x
print(x)
rm(x)
x <-2 ; y<-2.4
.Last.value
getwd()
set()
setwd()
10%%3
10%/%3
x<- 0.1
(1/(1-x))^10
(1/(1+x))^10
sqrt(2)
exp(1)
log10(10^8)
(1i)^2
(10)^400
all.equal(0.362*100,36.2)
10^(16)+1==10^(16)
NA==NA
is.na(NA)
v<- c(1,2,3)
v <-numericc(3)
v <-numeric(3)
v[1]=1;v [2]=2; [3]=3
v[1]=1; v[2]=2; v[3]=3
v <-2 ; v<- c(v,2); v<- c(v,3)
lenght(c(1,2,3))
v[c(1,3)]
v[c(TRUE,FALSE,TRUE)]
c(1:4)
seq(1,4,0.5)
pretty(c(0,1),2)
rep(c(1,2),4)
rep(c(1,2),aech=4)
rep(c(1,2),each=4)
library(combinant)
install.packages("combinat")
(perms <- permn(c(1:3))
library(combinant)
library(combinant)
library(combinat)
perms <- permn(c(1:3))
perms
comb <- combn(c(1:4),2)
comb
comb[,1]
c(1,2,3)/c(2,3,4)
c(1,2,3)/c(2,3,4)]
c(1,2,3)^c(2,3,4)]
c(1,2,3)^c(2,3,4)
v<- c(1:100)
sum(v)
c(1,2,3)>c(2,3,4)
any(c(FALSE,TRUE,FALSE))
all(c(FALSE,TRUE,FALSE))
which(c(FALSE,TRUE,FALSE))
v <-C(-3:3)
v <- C(-3:3)
v <- C(-3 ,-2,-1,0,1,2,3)
v <- c(-3 ,-2,-1,0,1,2,3)
v[v>=0]
sum(c(1,2,3))
sum(v>=0)
v <- runif(100,min=0,man=1)
v <- runif(100,min=0,max=1)
v
sum(v>= 0,5)
sum(v >= 0,5)
v <- sample (c(1:.10),100,replace =TRUE)
v
v <- sample (c(1:10),100,replace =TRUE)
v
sum (v <= 5)
v <- sample (c(1:10),10^6,replace =TRUE)
sum (v <= 5)
x <- (c(1:100))
y <- (c(1:100))
x <- (c(1:10),100,repalce=TRUE)
x <- (c(1:10),100,repalce=TRUE)
x <- sample (c(1:10),100,repalce=TRUE)
v <- sample (c(1:10),100,replace =TRUE)
y <- sample (c(1:10),100,replace =TRUE)
sum(v)
sum(y)
sum(v <= 50)
sum(y <= 50)
sum(v >= 50)
sum(v >= 5)
sum(y >= 5)
quantile(c(1:10),c(0.25,0.5,0.75))
summary (c(1:10))
sum(c(1,2,NA))
sum(c(1,2,NA)na.rm=true
sum(c(1,2,NA)na.rm=TRUE)
sum(c(1,2,NA),na.rm=TRUE)
v <- c(0,5,10,5,0)
which.max(v)
max(v)
v <- c(0,5,10,5,0);sort(v)
v <- c(0,5,10,5,0); order(v)
v <- c(0,5,10,5,0);sort(v,decreasing=TRUE)
v <- c(0,5,10,5,0);order(v,decreasing=TRUE)
v<- c(1,2,3,4,7,11,13,17,2)
match(7,v)
match(c(7,17),v)
match(2,v)
which(v %in% c(2)
which(v %in% c(2))
which(v %in% c(2))
M <-rbind (c(1,2,3), c(4,5,6))
M
M <- cbind(c1,4),c(2,5),c(3,6))
M <- cbind(c(1,4),c(2,5),c(3,6))
M
M <- matrix(C(1,2,3,4,5,6),nrow=2,ncol=3, byrow=TRUE)
M <- matrix(c(1,2,3,4,5,6),nrow=2,ncol=3, byrow=TRUE)
M
M <- matrix (c(1,4,2,5,3,6),nrow=2,ncol=3)
M
dim(M)
nrow(M)
ncol(M)
v <- Sample (c(-1:1),9,replace =TRUE)
v <- Sample(c(-1:1),9,replace =TRUE)
v <- sample(c(-1:1),9,replace =TRUE)
o <- matrix(c(sample((-1:1),9,replace=T)), nrow=3,ncol=3)
o
m<- rbind (c(1,2,3), c(4,5,6))
m
m[1:2 ,c(1,3)]
m[2,]
sum(M)
apply(M,1,sum)
apply(M,2,sum)
colsum(M)
colSums(M)
rowSums(M)
2L
typeof(2L)
is.numeric(2.5)
as.numeric(hi)
as.numeric('hi')
as.numeric(numeri)
as.numeric(TRUE)
as.numeric("a")
l<- (2.5, 'hi',TRUE)
l<- list(2.5, 'hi',TRUE)
l[1]
l$w
l$w <- 4.5
l
l<- list(2.5, 'hi',TRUE)
names(l) <- c('x','y','z')
str(l)
f <- factor(c("rot","rot","gelb","grün","rot"))
f
levels(f)
as.numeric(f)
table(f)
barplot(table(f))
pie(table(f))
f<- factor(c("klein","klein","groß","mittel","klein","mittel")),levels=c("klein","mittel","groß"),ordered =TRUE)
f<- factor(c("klein","klein","groß","mittel","klein","mittel"),levels=c("klein","mittel","groß"),ordered =TRUE)
f
age <- (10,16,62,27,39,78,4,25)
age <- c(10,16,62,27,39,78,4,25)
age.cut <- cut(age , breaks=c(0,18,65,inf),lablea=c("jung","mittel","alt"),ordered =TRUE,include.lowest=True,right=F)
age.cut <- cut(age , breaks=c(0,18,65,Inf),lablea=c("jung","mittel","alt"),ordered =TRUE,include.lowest=True,right=F)
age.cut <- cut(age , breaks=c(0,18,65,Inf),lablea=c("jung","mittel","alt"),ordered =TRUE,include.lowest=TRUE,right=F)
age.cut
table (age.cut)
age.cut <- cut(age , breaks=c(0,18,65,Inf),lable=c("jung","mittel","alt"),ordered =TRUE,include.lowest=TRUE,right=F)
table (age.cut)
pie(table(age.cut))
sample(c(1,2,3,4,5,7),2,prop=c(0.1,0.1,0.1,0.1,0.6))
sample(c(1,2,3,4,5,7),2,prob=c(0.1,0.1,0.1,0.1,0.6))
sample(c(1,2,3,5,7),2,prob=c(0.1,0.1,0.1,0.1,0.6))
sample(c(0,1),4,replace=TRUE)
sample(c("marjan","stella","sahand","marie"))
rnorm(4,mean=0,sd=1)
d1 <- as.Date("2023-02-17")
d2 <- as.Date("2023-05-12")
diff <- d2-d1
diff
difftime(d2,d1,unit="weeks")
difftime(d2,d1,unit="seconds")
difftime(d2,d1,unit="secs")
Sys.Date()
2^32
d1 <- as.Date("2023-02-17 14:00")
d2 <- as.Date("2023-05-12 20:00")
difftime(d2,d1,units="secs")
difftime(d2,d1,units="Weeks")
difftime(d2,d1,units="weeks")
d2 <- as.POSIXct("2023-05-12 20:00")
d1 <- as.POSIXct("2023-02-17 14:00")
difftime(d2,d1,units="weeks")
pi
tweets <-scan(file="tweets.txt",what = "character", sep="\n")
head (tweets,5); tail(tweets,5)
sample (c(1:lenght(tweets)),5)
sample (c(1:length(tweets)),5)
tweets[sample (c(1:length(tweets)),5)]
tweet1 <-nchar(tweets)
which.max(tweet1)
tweet1[which.max(tweet1)]
mean(tweets)
mean(tweet)
mean(tweet1)
tweets_obama <- tweets[grep ("obama",tweets,ignore.case=TRUE)]
tweets_obama
lenght(tweets_obama)
length(tweets_obama)
cat(tweets_obama,file="Trump_Obama.txt",sep= )
cat(tweets_obama,file="Trump_Obama.txt",sep= "\n" )
Trump_Obama.txt
savehistory("C:/Users/marja/OneDrive/Dokumente/R/helicopter/ProgrammingR_17022023.Rhistory")
